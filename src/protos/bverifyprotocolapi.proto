syntax = "proto3";

package serialization;
import "protos/mpt.proto";
option java_outer_classname = "BVerifyAPIMessageSerialization";

/** 
*		Messages sent from the CLIENT to the SERVER 
**/

/**
* Request for the server to issue a receipt (initiated 
* by a client)
*/
message IssueReceiptRequest {
	bytes issuer_id = 1;
	bytes recepient_id = 2;
	bytes receipt_data = 3;
}

/**
* Request for the server to redeem a receipt (initiated
* by a client)
*/
message RedeemReceiptRequest {
	bytes issuer_id = 1;
	bytes recepient_id = 2;
	// this will depend on the decisions we make
	// and what kind of ADS we will store the 
	// receipts in!
	bytes receipt_hash = 3;
}

/**
* Request for the server to transfer a receiept (intiated
* by a client)
*/
message TransferReceiptRequest {
	bytes issuer_id = 1;
	bytes recepient_id = 2;
	bytes sender_id = 3;
	bytes receipt_hash = 4;
}

/**
* Request for the server to send updates (initiated 
* by a client)
*/
message GetUpdatesRequest {
	int32 from_commit_number = 1;
	repeated bytes key_hashes = 2; 
}

/**
* 	Generic signature message along with the 
*	signer id
*/
message Signature {
	bytes signer_id = 1;
	bytes signature = 2;
}

/** 
*		Messages sent from SERVER to the CLIENT 
**/

/**
* A proof showing an issued receipt
*/
message ReceiptIssueApprove {
	MerklePrefixTrie proof = 1;
}

/**
* A proof showing a redeemed receipt
*/
message ReceiptRedeemApprove {
	MerklePrefixTrie proof = 1;
}

/**
* A proof showing a transferred receipt
*/
message ReceiptTransferApprove {
	MerklePrefixTrie proof = 1;
}

/**
* A sequence of updates (starting from the oldest)
*/
message Updates {
	repeated MerklePrefixTrie update = 1;
}







